basePath: /kitchencontrol/api/v1
definitions:
  dto.CheckoutDTO:
    properties:
      created_at:
        type: string
      customer_cpf:
        type: string
      gateway:
        type: string
      gateway_id:
        type: string
      gateway_transaction_id:
        type: string
      id:
        type: string
      order_id:
        type: string
      total:
        type: number
    type: object
  dto.CreateCheckoutDTO:
    properties:
      customer_cpf:
        type: string
      gateway:
        type: string
      gateway_id:
        type: string
      order_id:
        type: string
    type: object
  dto.CreateOrderDTO:
    properties:
      cpf:
        type: string
      items:
        items:
          $ref: '#/definitions/dto.CreateOrderItemDTO'
        type: array
    type: object
  dto.CreateOrderItemDTO:
    properties:
      productid:
        type: string
      quantity:
        type: integer
    type: object
  dto.CreateProductDTO:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  dto.CustomerDTO:
    properties:
      cpf:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  dto.KitchenDTO:
    properties:
      created_at:
        type: string
      id:
        type: string
      item_order_id:
        type: string
      order_id:
        type: string
      product_name:
        type: string
      responsible:
        type: string
    type: object
  dto.OrderDTO:
    properties:
      created_at:
        type: string
      customercpf:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/dto.OrderItemDTO'
        type: array
      status:
        type: string
      total:
        type: number
    type: object
  dto.OrderItemDTO:
    properties:
      id:
        type: string
      price:
        type: number
      productid:
        type: string
      quantity:
        type: integer
      status:
        type: string
    type: object
  dto.ProductDTO:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is fiap ddd challenge project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiap Challenge DDD API
  version: "1.0"
paths:
  /checkouts:
    post:
      consumes:
      - application/json
      description: Efetiva o pagamento do cliente, via fake checkout nesse momento,
        e libera o pedido para preparação. A ordem muda de status nesse momento, para
        em preparação.
      parameters:
      - description: cria novo Checkout
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCheckoutDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CheckoutDTO'
        "400":
          description: invalid data
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create Checkout
      tags:
      - Checkouts
  /customers:
    get:
      consumes:
      - application/json
      description: Get details of all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CustomerDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Create Customer in DB
      parameters:
      - description: cria novo cliente
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CustomerDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerDTO'
        "400":
          description: invalid data
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: customer already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create Customer
      tags:
      - Customers
  /customers/{cpf}:
    get:
      consumes:
      - application/json
      description: Get details of a customer by cpf
      parameters:
      - description: Customer cpf
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerDTO'
        "404":
          description: Customer not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a customer
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Update details of a customer by cpf
      parameters:
      - description: Customer cpf
        in: path
        name: id
        required: true
        type: string
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CustomerDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CustomerDTO'
        "400":
          description: Invalid data
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Customer not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a customer
      tags:
      - Customers
  /kitchens/orders:
    get:
      consumes:
      - application/json
      description: Retorna todos os pedidos (orders) que estão na cozinha para inicio
        de preparação. Se não houver pedidos, retorna um erro (404).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.KitchenDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get all orders in the kitchen
      tags:
      - Kitchens
  /orders:
    get:
      consumes:
      - application/json
      description: Retorna todos os pedidos (orders) registrados no sistema. Se não
        houver pedidos, retorna um erro (404).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.OrderDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get all orders
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Cria um peddo (order) no sistema. O cliente (customer) pode ou
        não de identificar. Se o cliente não se identificar, o pedido será registrado
        como anônimo. O produto, porém, deve ter sido previamente cadastrado.
      parameters:
      - description: cria nova Order
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OrderDTO'
        "400":
          description: invalid data
          schema:
            type: string
        "409":
          description: Order already exists
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create Order
      tags:
      - Orders
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a Order and their items by id
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OrderDTO'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Order not found
          schema:
            type: string
      summary: Get a Order by id
      tags:
      - Orders
  /orders/paid:
    get:
      consumes:
      - application/json
      description: Retorna todos os pedidos (orders) registrados no sistema. Se não
        houver pedidos, retorna um erro (404).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.OrderDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get all paid orders
      tags:
      - Orders
  /products:
    get:
      consumes:
      - application/json
      description: Get details of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProductDTO'
            type: array
        "400":
          description: Invalida data
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: No products foundr
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create Product in DB
      parameters:
      - description: cria novo produto
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDTO'
        "400":
          description: invalid data
          schema:
            type: string
        "409":
          description: product already exists
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create Product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete details of a Product by id
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDTO'
        "400":
          description: Invalid data
          schema:
            type: string
      summary: Delete a Product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Get details of a Product by id
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDTO'
        "404":
          description: Product not found
          schema:
            type: string
      summary: Get a Product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update details of a Product by id
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: string
      - description: Product data
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDTO'
        "400":
          description: Invalid data
          schema:
            type: string
        "404":
          description: Product not found
          schema:
            type: string
      summary: Update a Product
      tags:
      - Products
  /products/category/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a Product by category
      parameters:
      - description: Product category
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductDTO'
        "404":
          description: Product not found
          schema:
            type: string
        "500":
          description: Product not found
          schema:
            type: string
      summary: Get a Product by category
      tags:
      - Products
swagger: "2.0"
